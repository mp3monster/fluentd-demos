# This is a more complex FluentD example which makes use of Slack and another FluentD to demonstrate the possibility of
# concentration of agregation.  As we make use of Slack - you'll need to install the FluentD plugin - probably easiest done using 
# Ruby Gems command line.
# As with Demo 1, this is going to accept traffic as a JSON payload on an HTTP call. However we have exposed 2 JSON endpoints, 
# depending upon which end point is being invoked additional HTTP information is captured.

<source>
  # accept HTTP traffic on port 18080, and then get HTTP header information added to the payload
  # the tag is implicit here, using the 1st part of the path in the URL. For example if the URL was http://localhost:18080/phil then
  # the tag would be 'phil'
  @type http
  port 18080
	add_http_headers true
	add_remote_addr true
</source>

<source>
  # accept HTTP JSON payload, on port 38080  This time no addition information is added
  @type http
  port 38080
</source>

<match *>
  # accept any traffic into the next operation, this will copy the the payload to each of the store locations.  
  # The name -store- is some what missleading as it isn't necessarily somewhere that will store the log event
  # more information from https://docs.fluentd.org/output/copy

  @type copy
  <store>
    # send the log event to standard out so the event 
    @type stdout
  </store>
  
  <store>
    # this is responsible for passing on the event to another confluent store identified by the <server> 
    # more info on forwarding at https://docs.fluentd.org/output/forward
    # As we hold data before forwarding we need to describe the caching behaviour.  In this case we're just 
    # declaring it as being held in memory.
    # So that the message shows up on the 2nd instance 
    @type forward
	buffer_type memory
    	flush_interval 5s    
		<server>
			host 127.0.0.1
			port 28080
		</server>  
  </store>    
  <store>
    @type relabel
    @label @filtered
  </store>
  </match>
  
  
<label @filtered>  
  # here we have defined effectively a go to point by making use of the label.
  
  <filter>
  	# apply a filter using GREP filter type - https://docs.fluentd.org/filter/grep
  	@type grep
	
	# define the simplified representation of the regular expression, where we name a JSON element and the value to match
	# in this case we require an element called -language- and have avalue of English
    	regexp1 language English
  </filter>
	  
  <filter>	  
      @type record_transformer
      enable_ruby true
		  <record>
		    greeting ${record.dig("hello", "first")}
  </record>
  </filter>	  
	  
 	<match **>
		# any events that have reached this point  will now get sent to Slack
		
		@type slack
		
		# for more information on getting a token see https://api.slack.com
		token xoxb-your-slack-token-here
		
		username fluentd
		color green
		icon_emoji :ghost: # if you want to use icon_url, delete this param.
		channel general
		message %s has signalled %s now it is %s and this has occured: %s
		message_keys tag,greeting,time,event
		title %s
		title_keys tag
		flush_interval 1s
	</match>
</label>
